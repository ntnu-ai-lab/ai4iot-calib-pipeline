//Define the used version of proto
syntax = "proto3";

package aqcalibration;

//This represents one row in the dataset. For now assume we now beforehand which fields are gonna be present in the dataset.
message DataRow {
  string time = 1;
  float elgeseter_pm25_nilu = 2;
  float torget_pm25_nilu = 3;
  float elgeseter_pm10_nilu= 4;
  float torget_pm10_nilu = 5;
  float elgeseter_pm1_iot = 6;
  float torget_pm1_iot = 7;
  float elgeseter_pm25_iot = 8;
  float torget_pm25_iot = 9;
  float elgeseter_pm10_iot = 10;
  float torget_pm10_iot = 11;
  float elgeseter_opctemp_iot = 12;
  float torget_opctemp_iot = 13;
  float elgeseter_opchum_iot = 14;
  float torget_opchum_iot = 15;
  float air_temperature = 16;
  float relative_humidity = 17;
  float precipitation = 18;
  float air_pressure = 19;
  float wind_speed = 20;
  float wind_direction = 21;
  float t16219V72812_Total = 22;
  float t44656V72812_Total = 23;
  float t10236V72161_Total = 24;
}

message InputData {
  repeated DataRow rows = 1; 
}

// Request message must include: 1) the dataset; 2) the name of the sensor to use as target; 3) the pollutant (PM2.5 or PM10)
message CalibTrainRequest {
//  InputData data = 1;
  string train_sensor = 1;
  string pollutant = 2;
}

message CalibTrainResponse {
  float rmse = 1;
}

message CalibPredictRequest {
  DataRow data = 1;
}

message CalibPredictResponse {
  float calibrated_val = 1;
}

//Define the service
service Calibration {
  rpc calibration_train(CalibTrainRequest) returns (CalibTrainResponse);
  rpc calibration_predict(CalibPredictRequest) returns (CalibPredictResponse);
}