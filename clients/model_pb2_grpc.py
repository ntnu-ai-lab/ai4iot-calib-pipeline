# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import model_pb2 as model__pb2


class AI4IoTStub(object):
    """Define the service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.train_classifier = channel.unary_unary(
                '/aqpredictions.AI4IoT/train_classifier',
                request_serializer=model__pb2.AQTrainRequest.SerializeToString,
                response_deserializer=model__pb2.AQTrainResponse.FromString,
                )
        self.predict_aq_level = channel.unary_unary(
                '/aqpredictions.AI4IoT/predict_aq_level',
                request_serializer=model__pb2.AQPredictRequest.SerializeToString,
                response_deserializer=model__pb2.AQPredictResponse.FromString,
                )


class AI4IoTServicer(object):
    """Define the service
    """

    def train_classifier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict_aq_level(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AI4IoTServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'train_classifier': grpc.unary_unary_rpc_method_handler(
                    servicer.train_classifier,
                    request_deserializer=model__pb2.AQTrainRequest.FromString,
                    response_serializer=model__pb2.AQTrainResponse.SerializeToString,
            ),
            'predict_aq_level': grpc.unary_unary_rpc_method_handler(
                    servicer.predict_aq_level,
                    request_deserializer=model__pb2.AQPredictRequest.FromString,
                    response_serializer=model__pb2.AQPredictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aqpredictions.AI4IoT', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AI4IoT(object):
    """Define the service
    """

    @staticmethod
    def train_classifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aqpredictions.AI4IoT/train_classifier',
            model__pb2.AQTrainRequest.SerializeToString,
            model__pb2.AQTrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict_aq_level(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aqpredictions.AI4IoT/predict_aq_level',
            model__pb2.AQPredictRequest.SerializeToString,
            model__pb2.AQPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
