//Define the used version of proto
syntax = "proto3";

import "google/protobuf/empty.proto";
package aq_data_source;

// This data type includes all the fields for microsensor and meteorological data. Note: is synchronized with the same message type in the calibration service.
// TODO: add more fields when needed
// TODO: consider adding the sensor id as input
message DataSample {
  float pm1 = 1;
  float pm25 = 2;
  float pm10 = 3;
  float air_temperature = 4;
  float relative_humidity = 5;
  float precipitation = 6;
  float air_pressure = 7;
  float wind_speed = 8;
  float wind_direction = 9;
}

// Personal data to initialize the communication with data APIs
message InitRequest {
  string iot_token = 2;
  string met_id = 3;
}

// Two services are implemented at the data client server:
// - The initialization service with the purpose of letting the user to input his personal tokens/ids for APIs which need those.
// - A data fetching service which retrieves the last data available from the APIs
service AQDataSource {
  rpc initialize(InitRequest) returns (google.protobuf.Empty);
  rpc request_update(google.protobuf.Empty) returns (DataSample);
}